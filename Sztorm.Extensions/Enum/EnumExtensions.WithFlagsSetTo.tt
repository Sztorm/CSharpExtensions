<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>
using System;
using System.Runtime.CompilerServices;

namespace Sztorm.Extensions.Enum
{
    public static partial class EnumExtensions
    {
<#
    PushIndent("    ");
    WriteMethod(sizes[0], types[0]);

    for (int i = 1; i < types.Length; i++)
    {
        WriteLine("");
        WriteMethod(sizes[i], types[i]);
    }
    PopIndent();
#>
    }
}

<#+
    private Type[] types = { typeof(sbyte),  typeof(Int16), typeof(Int32), typeof(Int64) };
    private int[] sizes= { 8, 16, 32, 64 };

    private void WriteMethod(int size, Type type)
    {
#>
    private static TEnum Int<#= size #>WithFlagsSetTo<TEnum>(this TEnum source, TEnum flags, bool value)
        where TEnum : unmanaged, System.Enum
    {
        ref <#= type.Name #> sourceAsInt<#= size #> = ref Unsafe.As<TEnum, <#= type.Name #>>(ref source);
        sourceAsInt<#= size #> = (<#= type.Name #>)Int64WithFlagSetTo(
            Unsafe.As<TEnum, <#= type.Name #>>(ref source),
            Unsafe.As<TEnum, <#= type.Name #>>(ref flags),
            value);
    
        return source;
    }
<#+      
    }
#>